pipeline {
  agent any //?// { label 'master' } 
 
  parameters {   //젠킨스 파이프라인이 시작할때 넘겨 받는 변수
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
    booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
    //booleanParam(name : 'PROMPT_FOR_DEPLOY', defaultValue : false, description : 'PROMPT_FOR_DEPLOY')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

    // CI.
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '959714228357', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'lsw4701ecr', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1.0.0', description : 'DOCKER_TAG')

    // CD.
    //string(name : 'TARGET_SVR_USER', defaultValue : 'ec2-user', description : 'TARGET_SVR_USER')
    //string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ec2-user/', description : 'TARGET_SVR_PATH')
    //string(name : 'TARGET_SVR', defaultValue : '10.0.3.61', description : 'TARGET_SVR')
  }

  environment {
    REGION = "ap-northeast-2"
    // ECR_REPOSITORY = "959714228357.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}"
    // ECR_DOCKER_TAG = "${params.DOCKER_TAG}"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when {    
            expression { return params.BUILD_DOCKER_IMAGE } 
        }
      ///  agent {label 'build' }
        steps {       
             echo "Build docker image"//WORKSPACE,일반적으로 젠킨스에서 기본세팅  이 job이 실행되는 host의 위치-> var/jenkins_home/workspaces/demojob
               dir("${env.WORKSPACE}") {    
                 sh 'docker build -t test:1 .'
                // sh 'docker build -t ${DOCKER_IMAGE} .'
              }
        }
        post {
            always {
                echo "Docker build success!"
            }
        }
    }
    stage('============ Run test code ============') {
        when { expression { return params.RUN_TEST } }
       // agent //{ label 'build' }
        steps {
           
            sh('docker run --rm ${DOCKER_IMAGE} /root/.local/bin/pytest -v')
            // sh'''
            //     aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
            //     docker run --rm ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG} /root/.local/bin/pytest -v
            // '''
        }
    }
    stage('============ Push Docker Image ============') {
        when { expression { return params.PUSH_DOCKER_IMAGE } }
        // agent //{ label 'build' }
        steps {
 
               
           echo "Push Docker Image to ECR"
            sh'''
                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                docker push ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG}
            '''
        }
    }
    // stage('Prompt for deploy') {
    //     when { expression { return params.PROMPT_FOR_DEPLOY } }
    //     agent any //{ label 'deploy' }
    //     steps {
    //         script {
    //             env.APPROAL_NUM = input message: 'Please enter the approval number',
    //                               parameters: [string(defaultValue: '',
    //                                            description: '',
    //                                            name: 'APPROVAL_NUM')]
    //         }

    //         echo "${env.APPROAL_NUM}"
    //     }
    // }
    stage('============ Deploy workload ============') {
        when { expression { return params.DEPLOY_WORKLOAD } }
        // agent any //{ label 'deploy' }
        steps {
            echo "Deploy workload"
            // sshagent (credentials: ['aws_ec2_user_ssh']) {
            //     sh """#!/bin/bash
            //         scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
            //             deploy/docker-compose.yml \
            //             ${params.TARGET_SVR_USER}@${params.TARGET_SVR}:${params.TARGET_SVR_PATH};

            //         ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
            //             ${params.TARGET_SVR_USER}@${params.TARGET_SVR} \
            //             'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}; \
            //              export IMAGE=${ECR_DOCKER_IMAGE}; \
            //              export TAG=${ECR_DOCKER_TAG}; \
            //              docker-compose -f docker-compose.yml down;
            //              docker-compose -f docker-compose.yml up -d';
            //     """
            // }
        }
    }
  }

  post {
    cleanup {
        echo "Post clean up"

        // sh('docker image prune -f')
        // sh('docker container prune -f')
    }
    // failure {
    //   slackSend(
    //     channel: "#jenkins_test",
    //     color: "danger",
    //     message: "[Failed] Job:${env.JOB_NAME}, Build num:#${env.BUILD_NUMBER} @channel (<${env.RUN_DISPLAY_URL}|open job detail>)"
    //   )
    // }
  }
}